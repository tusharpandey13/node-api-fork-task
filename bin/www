#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

var logger = require('../utils/logger.js');
var errorHandler = require('../middlewares/errorHandler.js');

//   Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Error Middleware
app.use(errorHandler.notFound);
app.use(errorHandler.genericErrorHandler);
app.use(errorHandler.methodNotAllowed);

// Create HTTP server.
console.log('started on', port);
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Catch unhandled rejections
process.on('unhandledRejection', (err) => {
	logger.log.error('Unhandled rejection', err);
	process.exit(1);
});

// Catch uncaught exceptions
process.on('uncaughtException', (err) => {
	logger.log.error('Uncaught exception', err);
	process.exit(1);
});

// Normalize a port into a number, string, or false.
function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

// Event listener for HTTP server "listening" event.
// print stuff
function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}
